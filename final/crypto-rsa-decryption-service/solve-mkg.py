from pwn import *
import time, binascii

n = 2067870294958011057055285955402906046606048790411055875169573453537686332172209267408004747919606628058370206526960367880892445668185569509285031022814760278300660074538992941238982588619494964193409210892923688858242586013830561156541927776274966180885997095053592128354967440372151112352802070424021271867709873
e = 65537
cflag = 830144780125940486197043594519402775647010555742811842359207814917520372239224390038268506983945590914017447501759733518435739075026545060636422666418129968749711859639488111365290895840446401503036619441634142308550050624037073448524383606576227140182555712049129024301943559994704154884416671330162459299359164

def dec(c):
    while True:
        try:
            r = remote("localhost", 5000)
            r.readuntil("decimal): ")
            r.sendline(str(c))
            r.readline()
            m = r.readline().strip()
            m = int(m[-4:])
            r.close()
            return m
        except:
            r.close()
            time.sleep(1)

# https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack
lb = 0
ub = n
while lb != ub:
    print(ub-lb, lb, ub)
    cflag = (cflag * pow(2, e, n)) % n
    if dec(cflag) % 2 == 0:
        ub = (ub + lb)//2
    else:
        lb = (ub + lb)//2

x = hex(lb)[2:]
print(binascii.unhexlify(x))

print("done")
